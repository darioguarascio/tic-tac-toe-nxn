class d{INITIAL_MOVE_WEIGHT=3;gridSize;strikeSize;state;movesHistory;constructor(t,e){this.gridSize=t,this.strikeSize=e,this.state=new Array(t*t).fill(2),this.movesHistory=new Array}makeMove(t,e,r){if(typeof e>"u"||this.state.length<e||e<0)throw new Error("Invalid cell:"+e);if(this.state[e]!==2)throw new Error("Invalid move: "+this.state[e]);this.movesHistory.push([t,e,Array.from(this.state),r]),this.state[e]=t}movesLeft(){let t=0;for(let e=0;e<this.gridSize*this.gridSize;e++)this.state[e]===2&&t++;return t}generateRandomMoveset(){const t=new Array;for(let e=0;e<this.gridSize*this.gridSize;e++)this.state[e]===2&&t.push([e,this.INITIAL_MOVE_WEIGHT]);return t}encode(t){return`${this.strikeSize}.${(t??this.state).join("")}`}getValue(t,e){return this.state[t*this.gridSize+e]}getFlatIndex(t,e){return t*this.gridSize+e}checkSequence(t,e,r,s){let i=this.getValue(t,e);if(i===2)return null;let u=[this.getFlatIndex(t,e)];for(let a=1;a<this.strikeSize;a++){let o=t+a*r,c=e+a*s;if(this.getValue(o,c)!==i)return null;u.push(this.getFlatIndex(o,c))}return u}findKConsecutive(){const t=this.gridSize,e=this.strikeSize;for(let r=0;r<t;r++)for(let s=0;s<=t-e;s++){let i=this.checkSequence(r,s,0,1);if(i)return i}for(let r=0;r<=t-e;r++)for(let s=0;s<t;s++){let i=this.checkSequence(r,s,1,0);if(i)return i}for(let r=0;r<=t-e;r++)for(let s=0;s<=t-e;s++){let i=this.checkSequence(r,s,1,1);if(i)return i}for(let r=0;r<=t-e;r++)for(let s=e-1;s<t;s++){let i=this.checkSequence(r,s,1,-1);if(i)return i}return null}getState(){return{state:this.state}}end(t){let e=this.movesHistory,r=[];for(let s of e)if(s[0]==1){for(let i in s[3])s[3][i][0]===s[1]&&(s[3][i][1]=parseInt(s[3][i][1])+parseInt(t));r.push({state:this.encode(s[2]),moves:s[3]})}return r}}let n;const l={player:0,machine:0,draws:0};var h={};function g(f){return f.sort((t,e)=>e[1]-t[1]).map(t=>t[0]).shift()}self.onmessage=async f=>{switch(f.data[0]){case"GET_TRAIN_DATA":return self.postMessage(["TRAIN_DATA",h]);case"TRAINING":f.data[1]==="training-3x3"&&(h=await(await fetch("/tic-tac-toe-nxn/pretrained-data-3x3.json")).json());break;case"NEW_GAME":const t=parseInt(f.data[1]),e=parseInt(f.data[2]);return n=new d(t,e),self.postMessage(["NEW_GAME",n.getState()]);case"MOVE":const r=parseInt(f.data[1]);try{n.makeMove(0,r,null)}catch(a){return self.postMessage(["ERR",a])}let s=n.findKConsecutive();if(s)return n.end(-2).forEach(({state:a,moves:o})=>h[a]=o),l.player++,self.postMessage(["END",{...n.getState(),strike:s,winner:"player",stats:l}]);if(n.movesLeft()===0)return n.end(1).forEach(({state:a,moves:o})=>h[a]=o),l.draws++,self.postMessage(["END",{...n.getState(),strike:null,winner:"draw",stats:l}]);let i=h[n.encode(n.state)];i||(i=n.generateRandomMoveset());const u=g(i);try{n.makeMove(1,u,i)}catch(a){return self.postMessage(["ERR",a])}return s=n.findKConsecutive(),s?(n.end(3).forEach(({state:a,moves:o})=>h[a]=o),l.machine++,self.postMessage(["END",{...n.getState(),strike:s,winner:"machine",stats:l}])):n.movesLeft()===0?(n.end(1).forEach(({state:a,moves:o})=>h[a]=o),l.draws++,self.postMessage(["END",{...n.getState(),strike:null,winner:"draw",stats:l}])):self.postMessage(["STATE",{...n.getState(),moves:i,move:u}])}};
//# sourceMappingURL=game-BOBGhnJI.js.map
