{"version":3,"file":"Menace.astro_astro_type_script_index_0_lang.DmOFYpKh.js","sources":["../../src/components/Menace.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["window.gameWorker = new Worker(\n  new URL('../workers/worker.ts', import.meta.url),\n  {type: 'module'}\n);\n\n\nwindow.gameWorker.onmessage = (event) => {\n  window.dispatchEvent(new CustomEvent(\"gamemsg\", { \"detail\": event.data } ));\n};\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["event"],"mappings":"AA6GA,OAAO,WAAa,IAAI,OACtB,IAA+C,IAAA,6BAAA,YAAA,GAAA,EAC/C,CAAC,KAAM,QAAQ,CACjB,EAGA,OAAO,WAAW,UAAaA,GAAU,CAChC,OAAA,cAAc,IAAI,YAAY,UAAW,CAAE,OAAUA,EAAM,IAAK,CAAE,CAAC,CAC5E"}