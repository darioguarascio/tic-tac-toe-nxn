{"version":3,"file":"Menace.astro_astro_type_script_index_0_lang.CZvHXb9t.js","sources":["../../src/components/Menace.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["window.playerWorker = new Worker(new URL('../workers/player.ts', import.meta.url), {type: 'module'})\nwindow.gameWorker = new Worker(new URL('../workers/game.ts', import.meta.url), {type: 'module'});\n\nwindow.gameWorker.onmessage = (event) => {\n  window.dispatchEvent(new CustomEvent(\"gamemsg\", { \"detail\": event.data } ));\n};\n\nwindow.playerWorker.onmessage = (event) => {\n  window.dispatchEvent(new CustomEvent(\"playermsg\", { \"detail\": event.data } ));\n};\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["event"],"mappings":"AAwEA,OAAO,aAAe,IAAI,OAAO,IAAkD,IAAA,6CAAA,YAAA,GAAA,EAAA,CAAC,KAAM,QAAA,CAAS,EACnG,OAAO,WAAa,IAAI,OAAO,IAAgD,IAAA,2CAAA,YAAA,GAAA,EAAA,CAAC,KAAM,QAAA,CAAS,EAE/F,OAAO,WAAW,UAAaA,GAAU,CAChC,OAAA,cAAc,IAAI,YAAY,UAAW,CAAE,OAAUA,EAAM,IAAK,CAAE,CAAC,CAC5E,EAEA,OAAO,aAAa,UAAaA,GAAU,CAClC,OAAA,cAAc,IAAI,YAAY,YAAa,CAAE,OAAUA,EAAM,IAAK,CAAE,CAAC,CAC9E"}