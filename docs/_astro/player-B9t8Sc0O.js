class c{constructor(e,t){if(!Array.isArray(e))throw new Error("Game state must be an array");const s=e.length;if(this.size=Math.sqrt(s),!Number.isInteger(this.size))throw new Error("Game state length must be a perfect square");this.strikeLength=t,this.board=[...e],this.moves=this.board.filter(r=>r!==2).length,this.currentPlayer=this.moves%2===0?0:1,this.winningCombos=this.calculateWinningCombos()}calculateWinningCombos(){const e=[];for(let t=0;t<this.size;t++)for(let s=0;s<=this.size-this.strikeLength;s++){const r=[];for(let i=0;i<this.strikeLength;i++)r.push(t*this.size+(s+i));e.push(r)}for(let t=0;t<this.size;t++)for(let s=0;s<=this.size-this.strikeLength;s++){const r=[];for(let i=0;i<this.strikeLength;i++)r.push((s+i)*this.size+t);e.push(r)}for(let t=0;t<=this.size-this.strikeLength;t++)for(let s=0;s<=this.size-this.strikeLength;s++){const r=[];for(let i=0;i<this.strikeLength;i++)r.push((t+i)*this.size+(s+i));e.push(r)}for(let t=0;t<=this.size-this.strikeLength;t++)for(let s=this.strikeLength-1;s<this.size;s++){const r=[];for(let i=0;i<this.strikeLength;i++)r.push((t+i)*this.size+(s-i));e.push(r)}return e}getAvailableMoves(){return this.board.map((e,t)=>e===2?t:null).filter(e=>e!==null)}makeMove(e,t=this.currentPlayer){return this.board[e]===2?(this.board[e]=t,this.moves++,this.currentPlayer=this.currentPlayer===0?1:0,!0):!1}undoMove(e){return e>=0&&e<this.board.length&&this.board[e]!==2?(this.board[e]=2,this.moves--,this.currentPlayer=this.currentPlayer===0?1:0,!0):!1}checkWinner(){for(const e of this.winningCombos){const t=this.board[e[0]];if(t!==2&&e.every(s=>this.board[s]===t))return{winner:t,combo:e}}return null}isGameOver(){return this.checkWinner()||this.moves===this.size*this.size}getGameState(){const e=this.checkWinner();return e?{status:"win",winner:e.winner,combo:e.combo}:this.moves===this.size*this.size?{status:"draw"}:{status:"in_progress",currentPlayer:this.currentPlayer}}evaluate(){const e=this.checkWinner();return e?e.winner===0?10:-10:0}minimax(e,t,s=-1/0,r=1/0){if(this.isGameOver())return{score:this.evaluate()};const i=this.getAvailableMoves();let a=[];if(t){let o=-1/0;for(const n of i){this.makeMove(n,0);const h=this.minimax(e+1,!1,s,r);if(this.undoMove(n),h.score>o?(o=h.score,a=[n]):h.score===o&&a.push(n),s=Math.max(s,o),r<=s)break}return{score:o,moves:a}}else{let o=1/0;for(const n of i){this.makeMove(n,1);const h=this.minimax(e+1,!0,s,r);if(this.undoMove(n),h.score<o?(o=h.score,a=[n]):h.score===o&&a.push(n),r=Math.min(r,o),r<=s)break}return{score:o,moves:a}}}getBestMove(){if(this.isGameOver())return null;const e=this.currentPlayer===0,t=this.minimax(0,e);if(t.moves&&t.moves.length>0){const s=Math.floor(Math.random()*t.moves.length);return t.moves[s]}return null}getRandomMove(){if(this.isGameOver())return null;const e=this.getAvailableMoves();return e[Math.round(Math.random()*100%e.length)]}get2DBoard(){const e=[];for(let t=0;t<this.size;t++)e.push(this.board.slice(t*this.size,(t+1)*this.size));return e}printBoard(){const e=["0","1","-"],t=this.get2DBoard();let s="";for(let r=0;r<this.size;r++)s+=t[r].map(i=>e[i]).join(" ")+`
`;return s}}self.onmessage=l=>{const e=l.data[1].split("").map(r=>parseInt(r)),t=new c(e,l.data[2]);new Set(e).size==1&&e[0]==2&&(l.data[0]="random");let s;switch(l.data[0]){case"optimal":s=t.getBestMove();break;case"random":s=t.getRandomMove();break}return self.postMessage(s)};
//# sourceMappingURL=player-B9t8Sc0O.js.map
