{"version":3,"file":"game-BOBGhnJI.js","sources":["../src/SmartTTT.ts","../src/workers/game.ts"],"sourcesContent":["export class SmartTTT {\n\n  readonly INITIAL_MOVE_WEIGHT: number = 3;\n\n  gridSize: number;\n  strikeSize: number;\n  state: any[];\n\n  movesHistory: any[];\n\n  // Generates a NxN item\n  constructor(gridSize: number, strikeSize: number) {\n    this.gridSize = gridSize;\n    this.strikeSize = strikeSize;\n    this.state = new Array( gridSize * gridSize ).fill(2);\n    this.movesHistory = new Array();\n  };\n\n  makeMove(player: number, cell: number | undefined, moves: Array<[ number, number ]> | null) : void {\n    // console.log([cell, this.state])\n    if (typeof(cell) == 'undefined' || this.state.length < cell || cell < 0) {\n      throw new Error('Invalid cell:' + cell)\n    }\n    if (this.state[ cell ] !== 2) {\n      throw new Error('Invalid move: ' + this.state[cell])\n    }\n\n    // Save state before altering it\n    this.movesHistory.push([player, cell, Array.from(this.state), moves])\n\n    this.state[ cell ] = player;\n\n  };\n\n  movesLeft() : number {\n    let left = 0;\n    for (let i = 0; i < this.gridSize*this.gridSize; i++) {\n      if (this.state[i] === 2) {\n        left++;\n      }\n    }\n    return left;\n  };\n\n\n  generateRandomMoveset() : Array<[ number, number ]> {\n    const legalMoves : Array<[number, number]> = new Array();\n\n    for (let i = 0; i < (this.gridSize * this.gridSize); i++) {\n      if (this.state[i] === 2) {\n        legalMoves.push([ i, this.INITIAL_MOVE_WEIGHT ])\n      }\n    }\n    return legalMoves;\n\n  };\n\n  encode(state: number[] | null): string {\n    return `${this.strikeSize}.${ ( state ?? this.state).join('')}`;\n    // return state;\n    // return parseInt(`${this.gridSize} ${parseInt( state, 3 )}`);\n  };\n\n/*\n  rotate(state: number[]): [ number[], number[], number[], number[] ] {\n    const n = Math.sqrt(state.length);\n    if (!Number.isInteger(n)) {\n      throw new Error(\"Grid must be a square\");\n    }\n    const rotate0 = Array.from(state);\n    const rotated90: number[] = new Array(n*n);\n    const rotated180: number[] = new Array(n*n);\n    const rotated270: number[] = new Array(n*n);\n\n      // 90\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        const oldIndex = i * n + j;\n        const newIndex = j * n + (n - 1 - i);\n        // @ts-ignore\n        rotated90[newIndex] = state[oldIndex];\n      }\n    }\n\n      // 180\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        const oldIndex = i * n + j;\n        const newIndex = (n - 1 - i) * n + (n - 1 - j);\n        // @ts-ignore\n        rotated180[newIndex] = state[oldIndex];\n      }\n    }\n\n      // 270\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        const oldIndex = i * n + j;\n        const newIndex = (n - 1 - j) * n + i;\n        // @ts-ignore\n        rotated270[newIndex] = state[oldIndex];\n      }\n    }\n\n    return [ rotate0, rotated90, rotated180, rotated270 ];\n  };\n*/\n\n  getValue(row: number, col: number): number {\n    return this.state[row * this.gridSize + col];\n  };\n\n  getFlatIndex(row: number, col: number): number {\n    return row * this.gridSize + col;\n  };\n\n  checkSequence(startRow: number, startCol: number, rowStep: number, colStep: number) : null | number[] {\n    let firstValue = this.getValue(startRow, startCol);\n    if (firstValue === 2) {\n      return null;\n    }\n    let indices = [this.getFlatIndex(startRow, startCol)];\n\n    for (let x = 1; x < this.strikeSize; x++) {\n      let newRow = startRow + x * rowStep;\n      let newCol = startCol + x * colStep;\n      if (this.getValue(newRow, newCol) !== firstValue) {\n        return null;\n      }\n      indices.push(this.getFlatIndex(newRow, newCol));\n    }\n    return indices;\n  };\n\n\n\n  findKConsecutive() : null | number[] {\n    const N = this.gridSize;\n    const k = this.strikeSize;\n\n    // Check rows\n    for (let i = 0; i < N; i++) {\n        for (let j = 0; j <= N - k; j++) {\n            let result = this.checkSequence(i, j, 0, 1);\n            if (result) return result;\n        }\n    }\n\n    // Check columns\n    for (let i = 0; i <= N - k; i++) {\n        for (let j = 0; j < N; j++) {\n            let result = this.checkSequence(i, j, 1, 0);\n            if (result) return result;\n        }\n    }\n\n    // Check all diagonals (top-left to bottom-right)\n    for (let i = 0; i <= N - k; i++) {\n        for (let j = 0; j <= N - k; j++) {\n            let result = this.checkSequence(i, j, 1, 1);\n            if (result) return result;\n        }\n    }\n\n    // Check all diagonals (top-right to bottom-left)\n    for (let i = 0; i <= N - k; i++) {\n        for (let j = k - 1; j < N; j++) {\n            let result = this.checkSequence(i, j, 1, -1);\n            if (result) return result;\n        }\n    }\n\n    return null; // No k consecutive found\n  };\n\n  getState() {\n    return {\n      state: this.state\n    }\n  };\n\n/*\n*/\n\n\n  end(reward: number) {\n    let movesList = this.movesHistory;\n    let output : Array<any> = []\n\n    for (let move of movesList) {\n      if (move[0] == 1) { // if player is machine\n        for (let i in move[3]) {\n          if (move[3][i][0] === move[1]) {\n            move[3][i][1] = parseInt( move[3][i][1]) + parseInt( reward )\n          }\n        }\n        output.push({\n          state: this.encode(move[2]),\n          moves: move[3]\n        })\n\n      }\n    }\n    return output;\n  }\n\n\n\n\n}\n\n","\nimport { SmartTTT } from '../SmartTTT.ts';\n\nlet game : SmartTTT;\n\nconst stats = {\n  \"player\": 0,\n  \"machine\": 0,\n  \"draws\": 0\n}\nvar MOVES = {}\n\n\n/**\n * Simple weighted random selection from [element, score] pairs\n * @param {Array<[any, number]>} items - Array of [element, score] pairs\n * @returns {any} The selected element\n */\nfunction weightedRandom(items) {\n  // Calculate total weight\n  const totalWeight = items.reduce((sum, [_, weight]) => sum + weight, 0);\n\n  // Get a random value between 0 and total weight\n  const random = Math.random() * totalWeight;\n\n  // Find the selected element\n  let weightSum = 0;\n  for (const [element, weight] of items) {\n    weightSum += weight;\n    if (random < weightSum) {\n      return element;\n    }\n  }\n\n  // Fallback to last element (for floating point precision)\n  return items[items.length - 1][0];\n}\n\nfunction best(items) {\n  return items.sort( (a, b) => b[1] - a[1] ).map( e => e[0]).shift();\n}\n\n\n\n\nself.onmessage = async (e) => {\n\n  switch (e.data[0]) {\n\n    case \"GET_TRAIN_DATA\":\n      return self.postMessage(['TRAIN_DATA', MOVES])\n\n    case \"TRAINING\":\n      if (\"training-3x3\" === e.data[1]) {\n        let data = await fetch('/tic-tac-toe-nxn/pretrained-data-3x3.json')\n        MOVES = await data.json()\n      }\n      break;\n\n    case \"NEW_GAME\":\n      const gridSize = parseInt(e.data[1]), strikeSize = parseInt(e.data[2])\n      game = new SmartTTT(gridSize, strikeSize)\n      return self.postMessage(['NEW_GAME', game.getState()]);\n\n\n\n    case \"MOVE\":\n\n      const cell = parseInt(e.data[1])\n      try {\n        game.makeMove(0, cell, null )\n      } catch (e) {\n        return self.postMessage(['ERR', e])\n      }\n\n\n\n      let strike : null | number[] = game.findKConsecutive();\n\n      if (strike) {\n\n        game.end(-2).forEach( ({state,moves}) => MOVES[state] = moves )\n        stats.player++;\n        return self.postMessage(['END', { ...game.getState(), strike: strike, winner: \"player\", stats: stats}])\n      }\n\n      if (game.movesLeft() === 0) {\n        game.end(+1).forEach( ({state,moves}) => MOVES[state] = moves )\n        stats.draws++;\n        return self.postMessage(['END', { ...game.getState(), strike: null, winner: \"draw\", stats: stats}])\n      }\n\n\n\n      // Moves lookup\n      let moves = MOVES[ game.encode(game.state) ]\n\n      if (! moves) {\n        moves = game.generateRandomMoveset()\n      }\n\n\n      const move = best(moves)\n\n\n\n      try {\n        game.makeMove(1, move, moves)\n      } catch (e) {\n        return self.postMessage(['ERR', e])\n      }\n\n\n      strike = game.findKConsecutive();\n\n      if (strike) {\n        game.end(+3).forEach( ({state,moves}) => MOVES[state] = moves )\n        stats.machine++;\n        return self.postMessage(['END', { ...game.getState(), strike: strike, winner: \"machine\", stats: stats}])\n      }\n\n      if (game.movesLeft() === 0) {\n        game.end(+1).forEach( ({state,moves}) => MOVES[state] = moves )\n        stats.draws++;\n        return self.postMessage(['END', { ...game.getState(), strike: null, winner: \"draw\", stats: stats}])\n      }\n\n\n\n      return self.postMessage(['STATE', { ...game.getState(), moves: moves, move: move }]);\n\n\n\n  }\n\n  // const workerResult = `Result: ${e.data[0] * e.data[1]}`;\n  // console.log(\"Posting message back to main script\");\n  // postMessage(workerResult);\n\n  // self.postMessage(x);\n\n};\n// console.log('x')\n\n// export default self;"],"names":["SmartTTT","gridSize","strikeSize","player","cell","moves","left","i","legalMoves","state","row","col","startRow","startCol","rowStep","colStep","firstValue","indices","x","newRow","newCol","N","k","j","result","reward","movesList","output","move","game","stats","MOVES","best","items","a","b","e","strike"],"mappings":"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"}