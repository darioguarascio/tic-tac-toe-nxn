{"version":3,"file":"player-Da-VQCRS.js","sources":["../src/players/Optimal.js","../src/workers/player.ts"],"sourcesContent":["\nexport class TicTacToeNK {\n  constructor(gameState, strikeLength) {\n    if (!Array.isArray(gameState)) {\n      throw new Error('Game state must be an array');\n    }\n\n    // Infer board size from game state using square root\n    const boardLength = gameState.length;\n    this.size = Math.sqrt(boardLength);\n\n    // Validate that the board is a perfect square\n    if (!Number.isInteger(this.size)) {\n      throw new Error('Game state length must be a perfect square');\n    }\n\n    this.strikeLength = strikeLength;\n    this.board = [...gameState];\n\n    // Count moves to determine current player\n    this.moves = this.board.filter(cell => cell !== 2).length;\n    this.currentPlayer = this.moves % 2 === 0 ? 0 : 1; // 0 = player1, 1 = player2\n    this.winningCombos = this.calculateWinningCombos();\n  }\n\n  // Calculate all possible winning combinations based on size and strikeLength\n  calculateWinningCombos() {\n    const combos = [];\n\n    // Horizontal wins\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col <= this.size - this.strikeLength; col++) {\n        const combo = [];\n        for (let k = 0; k < this.strikeLength; k++) {\n          combo.push(row * this.size + (col + k));\n        }\n        combos.push(combo);\n      }\n    }\n\n    // Vertical wins\n    for (let col = 0; col < this.size; col++) {\n      for (let row = 0; row <= this.size - this.strikeLength; row++) {\n        const combo = [];\n        for (let k = 0; k < this.strikeLength; k++) {\n          combo.push((row + k) * this.size + col);\n        }\n        combos.push(combo);\n      }\n    }\n\n    // Diagonal wins (top-left to bottom-right)\n    for (let row = 0; row <= this.size - this.strikeLength; row++) {\n      for (let col = 0; col <= this.size - this.strikeLength; col++) {\n        const combo = [];\n        for (let k = 0; k < this.strikeLength; k++) {\n          combo.push((row + k) * this.size + (col + k));\n        }\n        combos.push(combo);\n      }\n    }\n\n    // Diagonal wins (top-right to bottom-left)\n    for (let row = 0; row <= this.size - this.strikeLength; row++) {\n      for (let col = this.strikeLength - 1; col < this.size; col++) {\n        const combo = [];\n        for (let k = 0; k < this.strikeLength; k++) {\n          combo.push((row + k) * this.size + (col - k));\n        }\n        combos.push(combo);\n      }\n    }\n\n    return combos;\n  }\n\n  // Get available moves\n  getAvailableMoves() {\n    return this.board.map((cell, index) => cell === 2 ? index : null).filter(index => index !== null);\n  }\n\n  // Make a move\n  makeMove(index, player = this.currentPlayer) {\n    if (this.board[index] === 2) {\n      this.board[index] = player;\n      this.moves++;\n      this.currentPlayer = this.currentPlayer === 0 ? 1 : 0;\n      return true;\n    }\n    return false;\n  }\n\n  // Undo a move\n  undoMove(index) {\n    if (index >= 0 && index < this.board.length && this.board[index] !== 2) {\n      this.board[index] = 2; // Reset to empty\n      this.moves--;\n      this.currentPlayer = this.currentPlayer === 0 ? 1 : 0;\n      return true;\n    }\n    return false;\n  }\n\n  // Check for a winner\n  checkWinner() {\n    for (const combo of this.winningCombos) {\n      const firstCell = this.board[combo[0]];\n      if (firstCell !== 2 && combo.every(index => this.board[index] === firstCell)) {\n        return { winner: firstCell, combo };\n      }\n    }\n    return null;\n  }\n\n  // Check if the game is over\n  isGameOver() {\n    return this.checkWinner() || this.moves === this.size * this.size;\n  }\n\n  // Get the state of the game\n  getGameState() {\n    const winResult = this.checkWinner();\n    if (winResult) {\n      return {\n        status: 'win',\n        winner: winResult.winner,\n        combo: winResult.combo\n      };\n    } else if (this.moves === this.size * this.size) {\n      return { status: 'draw' };\n    } else {\n      return {\n        status: 'in_progress',\n        currentPlayer: this.currentPlayer\n      };\n    }\n  }\n\n  // Evaluate the board (for minimax)\n  evaluate() {\n    const winResult = this.checkWinner();\n    if (winResult) {\n      return winResult.winner === 0 ? 10 : -10; // Player 0 is maximizing\n    }\n    return 0;\n  }\n// Minimax algorithm with alpha-beta pruning\nminimax(depth, isMaximizing, alpha = -Infinity, beta = Infinity) {\n  if (this.isGameOver()) {\n    const score = this.evaluate();\n    return { score };\n  }\n\n  const availableMoves = this.getAvailableMoves();\n  let bestMoves = [];\n\n  if (isMaximizing) {\n    let bestScore = -Infinity;\n    for (const move of availableMoves) {\n      this.makeMove(move, 0); // Player 0 is maximizing\n      const result = this.minimax(depth + 1, false, alpha, beta);\n      this.undoMove(move);\n\n      if (result.score > bestScore) {\n        bestScore = result.score;\n        bestMoves = [move]; // Reset to a new array with just this move\n      } else if (result.score === bestScore) {\n        bestMoves.push(move); // Add this move to equally good moves\n      }\n\n      alpha = Math.max(alpha, bestScore);\n      if (beta <= alpha) break; // Alpha-beta pruning\n    }\n    return { score: bestScore, moves: bestMoves };\n  } else {\n    let bestScore = Infinity;\n    for (const move of availableMoves) {\n      this.makeMove(move, 1); // Player 1 is minimizing\n      const result = this.minimax(depth + 1, true, alpha, beta);\n      this.undoMove(move);\n\n      if (result.score < bestScore) {\n        bestScore = result.score;\n        bestMoves = [move]; // Reset to a new array with just this move\n      } else if (result.score === bestScore) {\n        bestMoves.push(move); // Add this move to equally good moves\n      }\n\n      beta = Math.min(beta, bestScore);\n      if (beta <= alpha) break; // Alpha-beta pruning\n    }\n    return { score: bestScore, moves: bestMoves };\n  }\n}\n\n// Get the best move without actually making it\ngetBestMove() {\n  if (this.isGameOver()) return null;\n\n  const isMaximizing = this.currentPlayer === 0;\n  const result = this.minimax(0, isMaximizing);\n\n  if (result.moves && result.moves.length > 0) {\n    // Pick a random move from the list of equally good moves\n    const randomIndex = Math.floor(Math.random() * result.moves.length);\n    return result.moves[randomIndex];\n  }\n  return null;\n}\n\n  getRandomMove() {\n    if (this.isGameOver()) return null;\n\n    const availableMoves = this.getAvailableMoves();\n\n    return availableMoves[ Math.round((Math.random() * 100) % availableMoves.length) ]\n  }\n\n  // Get board as 2D array (for display purposes)\n  get2DBoard() {\n    const board2D = [];\n    for (let i = 0; i < this.size; i++) {\n      board2D.push(this.board.slice(i * this.size, (i + 1) * this.size));\n    }\n    return board2D;\n  }\n\n  // Print the current board state\n  printBoard() {\n    const symbols = ['0', '1', '-']; // 0 = player1, 1 = player2, 2 = empty\n    const board2D = this.get2DBoard();\n    let result = '';\n    for (let i = 0; i < this.size; i++) {\n      result += board2D[i].map(cell => symbols[cell]).join(' ') + '\\n';\n    }\n    return result;\n  }\n}\n","import { TicTacToeNK } from '../players/Optimal.js';\n\n\n\nself.onmessage = (e) => {\n  const state = e.data[1].split('').map( (e) => parseInt(e) )\n\n  const game = new TicTacToeNK(state, e.data[2]);\n\n\n  if (new Set(state).size == 1 && state[0] == 2) {\n    e.data[0] = 'random';\n  }\n\n  switch (e.data[0]) {\n    case \"optimal\":\n      const bestMove = game.getBestMove();\n      return self.postMessage( bestMove );\n\n    case \"random\":\n      const randomMove = game.getRandomMove();\n      return self.postMessage( randomMove );\n\n  }\n\n}\n"],"names":["TicTacToeNK","gameState","strikeLength","boardLength","cell","combos","row","col","combo","k","index","player","firstCell","winResult","depth","isMaximizing","alpha","beta","availableMoves","bestMoves","bestScore","move","result","randomIndex","board2D","i","symbols","e","state","game","bestMove","randomMove"],"mappings":"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"}